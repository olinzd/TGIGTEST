// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø FIREBASE
const firebaseConfig = {
    apiKey: "AIzaSyDmoAORpz-NhWQskyW_p9IwCKrClC419LQ",
    authDomain: "testtgid.firebaseapp.com",
    projectId: "testtgid",
    storageBucket: "testtgid.firebasestorage.app",
    messagingSenderId: "262521008550",
    appId: "1:262521008550:web:640971c8590503dde95f67"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
let db, auth;

try {
    const app = firebase.initializeApp(firebaseConfig);
    db = firebase.firestore();
    auth = firebase.auth();
    console.log('‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
    showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: ' + error.message);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const statusElement = document.getElementById('status');
const saveBtn = document.getElementById('saveBtn');
const refreshBtn = document.getElementById('refreshBtn');

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function showLoading(message) {
    statusElement.innerHTML = `
        <div class="status-loading">
            <div class="spinner"></div>
            <p>${message}</p>
        </div>
    `;
}

function showSuccess(message) {
    statusElement.innerHTML = `
        <div class="status-success">
            <h3>‚úÖ –£—Å–ø–µ—Ö!</h3>
            <p>${message}</p>
        </div>
    `;
}

function showError(message) {
    statusElement.innerHTML = `
        <div class="status-error">
            <h3>‚ùå –û—à–∏–±–∫–∞</h3>
            <p>${message}</p>
            <p><small>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firebase</small></p>
        </div>
    `;
}

function showDebugInfo(info) {
    statusElement.innerHTML += `
        <div class="debug-info">
            <h4>üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:</h4>
            <pre>${JSON.stringify(info, null, 2)}</pre>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function authenticateAnonymously() {
    showLoading('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Firebase...');
    
    try {
        const userCredential = await auth.signInAnonymously();
        return userCredential.user;
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' + error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
function getTelegramUserData() {
    const user = tg.initDataUnsafe.user;
    
    if (!user || !user.id) {
        showError('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã');
        throw new Error('No Telegram user data');
    }

    return {
        tg_id: user.id,
        tg_username: user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω',
        first_name: user.first_name || '',
        last_name: user.last_name || '',
        language_code: user.language_code || '',
        is_premium: user.is_premium || false,
        timestamp: new Date().toISOString()
    };
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Firestore
async function saveUserData(userData) {
    showLoading('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        const currentUser = auth.currentUser;
        if (!currentUser) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
        }

        const dataWithAuth = {
            ...userData,
            firebase_uid: currentUser.uid,
            auth_timestamp: new Date().toISOString()
        };

        await db.collection('users').doc(userData.tg_id.toString()).set(dataWithAuth, { 
            merge: true 
        });
        
        return true;
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        showDebugInfo({
            error: error.message,
            userData: userData,
            firebaseConfig: {
                projectId: firebaseConfig.projectId,
                authDomain: firebaseConfig.authDomain
            },
            timestamp: new Date().toISOString()
        });
        
        throw error;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        tg.ready();
        tg.BackButton.hide();
        tg.expand();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Firebase
        if (!db || !auth) {
            showError('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Firebase
        const firebaseUser = await authenticateAnonymously();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        const userData = getTelegramUserData();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await saveUserData(userData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
        showSuccess(`
            –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!<br>
            ID: ${userData.tg_id}<br>
            Username: @${userData.tg_username}<br>
            –ò–º—è: ${userData.first_name} ${userData.last_name}
        `);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
saveBtn.addEventListener('click', async () => {
    try {
        const userData = getTelegramUserData();
        await saveUserData(userData);
        tg.showPopup({ title: '‚úÖ –£—Å–ø–µ—Ö', message: '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' });
    } catch (error) {
        tg.showPopup({ title: '‚ùå –û—à–∏–±–∫–∞', message: error.message });
    }
});

refreshBtn.addEventListener('click', () => {
    location.reload();
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', initApp);
